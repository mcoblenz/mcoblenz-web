---
---
@inproceedings{Omar2025:FAIR,
  author    = {Omar, Cyrus and Coblenz, Michael and Madhavapeddy, Anil},
  title     = {A FAIR Case for a Live Computational Commons},
  year      = {2025},
  isbn      = {9798400721618},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3759536.3763802},
  acm       = {https://doi.org/10.1145/3759536.3763802},
  doi       = {10.1145/3759536.3763802},
  abstract  = {Scientists increasingly write software as part of large-scale collaborative workflows, but current tools make it difficult to follow FAIR principles (findability, accessibility, interoperability, reusability) and ensure reproducibility by default.   This paper proposes Fairground, a computational commons designed as a collaborative notebook system where thousands of scientific artifacts are authored, collected, and maintained together in executable form in a manner that is FAIR, reproducible, and live by default. Unlike existing platforms, Fairground notebooks can reference each other as libraries, forming a single planetary-scale live program executed by a distributed scheduler.   We describe the design of Fair Python, a purely functional subset of Python, and a foreign function interface for interoperating with existing code. Through three interleaved research tracks focusing on language design, interoperability, and distributed execution, we aim to create a next-generation collaborative scientific workflow system that makes best practices the path of least resistance.},
  booktitle = {Proceedings of the 2nd ACM SIGPLAN International Workshop on Programming for the Planet},
  pages     = {8‚Äì13},
  numpages  = {6},
  keywords  = {fair, functional, python, reproducible, reusability, scientific computing, visualization},
  location  = {Singapore, Singapore},
  series    = {PROPL '25},
  abbr      = {PROPL}
}

@inproceedings{Aldrich2025:RestPi,
  author    = {Mark W. Aldrich and Kyla Levin and Michael Coblenz and Jeffrey Foster},
  title     = {RestPi: Path-Sensitive Type Inference for REST APIs},
  year      = {2025},
  booktitle = {PACMPL Issue OOPSLA},
  series    = {OOPSLA '25},
  abbr      = {OOPSLA},
  pdf       = {OOPSLA_2025_REST.pdf},
  acm       = {https://doi.org/10.1145/3763055},
  abstract  = {REST APIs form the backbone of modern interconnected systems by providing a language-agnostic communication interface. REST API specifications should clearly describe all response types, but automatically generating specifications is difficult with existing tools.
               
               We present RESTùúã, a type inference engine capable of automatically generating REST API specifications. The novel contribution of RESTùúã is our use of path-sensitive type inference, which encodes symbolic path-constraints directly into a type system. This allows RESTùúã to enumerate all response types by considering each distinct execution path through an endpoint implementation. We implement path-sensitive type inference for Ruby, a popular language used for REST API servers. We evaluate RESTùúã by using it to infer types for 132 endpoints across 5 open-source REST API implementations without utilizing existing specifications or test suites. We find RESTùúã performs type inference efficiently and produces types that are more precise and complete than those obtained via an HTTP proxy. Our results suggest that path-sensitivity is a key technique to enumerate distinct response types for REST endpoints.}
}



@inproceedings{Mugnier2025:Impact,
  author    = {Eric Mugnier and Zhou Yuanyuan and Ranjit Jhala and Michael Coblenz},
  title     = {On the Impact of Formal Verification on Software Development},
  year      = {2025},
  booktitle = {PACMPL Issue OOPSLA},
  series    = {OOPSLA '25},
  abbr      = {OOPSLA},
  pdf       = {OOPSLA_2025_Dafny.pdf},
  acm       = {https://dl.acm.org/doi/10.1145/3763181},
  abstract  = {Auto-active verifiers like Dafny aim to make formal methods accessible to non-expert users through SMT automation. However, despite the automation and other programmer-friendly features, they remain sparsely used in real-world software development, due to the significant effort required to apply them in practice. We interviewed 14 experienced Dafny users about their experiences using it in large-scale projects. We apply grounded theory to analyze the interviews to systematically identify how auto-active verification impacts software development, and to identify opportunities to simplify the use, and hence, expand the adoption of verification in software development.}
}


@inproceedings{Ravi2025:Empirical,
  author    = {Savitha Ravi and Michael Coblenz},
  title     = {An Empirical Evaluation of Property-Based Testing},
  year      = {2025},
  booktitle = {PACMPL Issue OOPSLA},
  series    = {OOPSLA '25},
  abbr      = {OOPSLA},
  pdf       = {OOPSLA_2025_PBT.pdf},
  acm       = {https://dl.acm.org/doi/10.1145/3764068},
  abstract  = {Property-based testing (PBT) is a testing methodology with origins in the functional programming community. In recent years, PBT libraries have been developed for non-functional languages, including Python. However, to date, there is little evidence regarding how effective property-based tests are at finding bugs, and whether some kinds of property-based tests might be more effective than others. To gather this evidence, we conducted a corpus study of 426 Python programs that use Hypothesis, Python‚Äôs most popular library for PBT. We developed formal definitions for 12 categories of property-based test and implemented an intraprocedural static analysis that categorizes tests. Then, we evaluated the efficacy of test suites of 40 projects using mutation testing, and found that on average, each property-based test finds about 50 times as many mutations as the average unit test. We also identified the categories with the tests most effective at finding mutations, finding that tests that look for exceptions, that test inclusion in collections, and that check types are over 19 times more effective at finding mutations than other kinds of property-based tests. Finally, we conducted a parameter sweep study to assess the strength of property-based tests as a function of the number of random inputs generated, finding that 76% of mutations found were found within the first 20 inputs.}
}

@article{Ko2025:Retrospective,
  author  = {Amy J. Ko and Brad A. Myers and Michael Coblenz and Htet Htet Aung},
  journal = {Transactions on Software Engineering},
  number  = {},
  title   = {A Retrospective on How Developers Seek, Relate, and Collect Information About Code},
  volume  = {},
  year    = {2025},
  abbr    = {TSE},
  note    = {To appear},
  ieee    = {https://ieeexplore.ieee.org/document/10855640}
}

@inproceedings{Huang2025:Scientists,
  author    = {Ruanqianqian (Lisa) Huang and Savitha Ravi and Michael He and Boyu Tian and Sorin Lerner and Michael Coblenz},
  series    = {ICSE '25},
  booktitle = {International Conference on Software Engineering},
  abbr      = {ICSE},
  title     = {How Scientists Use Jupyter Notebooks: Goals, Quality Attributes, and Opportunities},
  year      = {2025},
  selected  = {true},
  note      = {To appear. 21\% acceptance rate},
  arxiv     = {2503.12309},
  ieee      = {https://ieeexplore.ieee.org/document/11029931}
}

@inproceedings{Jiang2025:Questions,
  author    = {Shaokang Jiang and Jimmy Koppel and Michael Coblenz},
  series    = {PLATEAU '25},
  booktitle = {14th Annual Workshop on the Intersection of HCI and PL},
  title     = {Questions Before Answers? A Comparison of Codebase Chatbots and Tutorials for Codebase Learning},
  year      = {2025},
  abbr      = {PLATEAU}
}


@inproceedings{Jiang2024:Analysis,
  author    = {Shaokang Jiang and Michael Coblenz},
  title     = {An Analysis of the Costs and Benefits of Autocomplete in IDEs},
  series    = {FSE '24},
  booktitle = {Foundations of Software Engineering},
  abbr      = {FSE},
  year      = {2024},
  selected  = {true},
  note      = {To appear},
  pdf       = {fse24-autocomplete.pdf}
}


@inproceedings{Pertseva2024:Theory,
  author    = {Elizaveta Pertseva and Melinda Chang and Ulia Zaman and Michael Coblenz},
  series    = {ICSE '24},
  booktitle = {International Conference on Software Engineering},
  abbr      = {ICSE},
  title     = {A Theory of Scientific Programming Efficacy},
  year      = {2024},
  pdf       = {Scientific_Computing__ICSE_2024.pdf},
  doi       = {https://dl.acm.org/doi/10.1145/3597503.3639139},
  acm       = {https://dl.acm.org/doi/10.1145/3597503.3639139},
  note      = {22\% acceptance rate}
}


@inproceedings{Coblenz2023:Qualitative,
  author    = {Michael Coblenz and Wentao Guo and Kamatchi Voozhian and Jeffrey Foster},
  series    = {VL/HCC '23},
  booktitle = {IEEE Symposium on Visual Languages and Human-Centric Computing},
  abbr      = {VL/HCC},
  title     = {A Qualitative Study of REST API Design and Specification Practices},
  year      = {2023},
  pdf       = {vlhcc23.pdf},
  ieee      = {https://doi.org/10.1109/VL-HCC57772.2023.00025}
}

@inproceedings{Coblenz2023:Multimodal,
  author    = {Michael Coblenz and April Porter and Varun Das and Teja Nallagorla and Michael Hicks},
  series    = {PLATEAU '23},
  booktitle = {13th Annual Workshop on the Intersection of HCI and PL},
  title     = {A Multimodal Study of Challenges Using Rust},
  year      = {2023},
  abbr      = {PLATEAU},
  pdf       = {https://kilthub.cmu.edu/articles/conference_contribution/A_Multimodal_Study_of_Challenges_Using_Rust/22277326}
}

@inproceedings{Huang2023:How,
  author    = {Ruanqianqian Huang and Elizaveta Pertseva and Michael Coblenz and Sorin Lerner},
  series    = {PLATEAU '23},
  booktitle = {13th Annual Workshop on the Intersection of HCI and PL},
  title     = {How do Haskell Programmers Debug?},
  year      = {2023},
  abbr      = {PLATEAU},
  pdf       = {https://kilthub.cmu.edu/articles/conference_contribution/How_do_Haskell_programmers_debug_/22277347}
}

@inproceedings{Liu2023:Debugging,
  author    = {Amanda Liu and Michael Coblenz},
  series    = {PLATEAU '23},
  booktitle = {13th Annual Workshop on the Intersection of HCI and PL},
  title     = {Debugging Techniques in Professional Programming},
  year      = {2023},
  abbr      = {PLATEAU},
  pdf       = {https://kilthub.cmu.edu/articles/conference_contribution/Debugging_Techniques_in_Professional_Programming/22277365}
}

@inproceedings{Coblenz2022:Games,
  title     = {Using Games to Broaden Audiences for Programming Studies},
  author    = {Michael Coblenz and Felix Sosa},
  year      = {2022},
  series    = {RoPES '22},
  booktitle = {RoPES International Workshop on Recruitment Of Participants for Empirical SE Studies, workshop at ICSE},
  pdf       = {https://github.com/ropes-workshops/ropes-workshops.github.io/raw/master/files/ropes2022/ROPES_22_paper_18.pdf},
  abbr      = {RoPES}
}


@inproceedings{Coblenz2022:Bronze,
  title     = {Garbage Collection Makes Rust Easier to Use: A Randomized Controlled Trial of the Bronze Garbage Collector},
  author    = {Michael Coblenz and Michelle L. Mazurek and Michael Hicks},
  year      = {2022},
  series    = {ICSE '17},
  booktitle = {International Conference on Software Engineering},
  abbr      = {ICSE},
  selected  = {true},
  doi       = {https://doi.org/10.1145/3510003.3510107},
  acm       = {https://doi.org/10.1145/3510003.3510107},
  note      = {(26\% acceptance rate)}
}

@misc{mou2021empirical,
  title         = {An Empirical Study of Protocols in Smart Contracts},
  author        = {Timothy Mou and Michael Coblenz and Jonathan Aldrich},
  year          = {2021},
  arxiv         = {2110.08983},
  archiveprefix = {arXiv},
  primaryclass  = {cs.PL},
  abbr          = {HATRA}
}

@misc{coblenz2021theory,
  title         = {Toward a Theory of Programming Language and Reasoning Assistant Design: Minimizing Cognitive Load},
  author        = {Michael Coblenz},
  year          = {2021},
  arxiv         = {2110.03806},
  archiveprefix = {arXiv},
  primaryclass  = {cs.PL},
  abbr          = {HATRA}
}

@article{Coblenz2021:PLIERS,
  title    = {PLIERS: A Process that Integrates User-Centered Methods into Programming Language Design},
  author   = {Michael Coblenz and Gauri Kambhatla and Paulette Koronkevich and Jenna L. Wise and Celeste Barnaby and Joshua Sunshine and Jonathan Aldrich and Brad A. Myers},
  year     = {2021},
  journal  = {ACM Transactions on Computer-Human Interaction},
  selected = {true},
  abbr     = {TOCHI},
  doi      = {http://dx.doi.org/10.1145/3452379},
  volume   = {28},
  issue    = {4},
  pages    = {1-53},
  acm      = {https://dl.acm.org/doi/10.1145/3452379}
}

@inproceedings{Oei2021:Psamathe,
  title     = {Psamathe: A DSL with Flows for Safe Blockchain Assets (extended abstract)},
  author    = {Reed Oei and Michael Coblenz and Jonathan Aldrich},
  booktitle = {Practical Aspects of Declarative Languages, workshop at POPL},
  series    = {PADL 2021},
  abbr      = {PADL},
  year      = {2021}
}

@article{Oei2021:Psamathe-arxiv,
  title         = {Psamathe: A DSL with Flows for Safe Blockchain Assets},
  author        = {Reed Oei and Michael Coblenz and Jonathan Aldrich},
  year          = {2020},
  arxiv         = {2010.04800},
  archiveprefix = {arXiv},
  primaryclass  = {cs.PL},
  abbr          = {arXiv}
}

@inproceedings{Coblenz2020:User,
  title     = {User-Centered Programming Language Design: A Course-Based Case Study},
  author    = {Michael Coblenz and Ariel Davis and Megan Hofmann and Vivian Huang and Siyue Jin and Max Krieger and Kyle Liang and Brian Wei and Mengchen Sam Yong and Jonathan Aldrich},
  booktitle = {1st International Workshop on Human Aspects of Types and Reasoning Assistants, workshop at SPLASH},
  series    = {HATRA 2020},
  abbr      = {HATRA},
  arxiv     = {2011.07565},
  year      = {2020}
}

@inproceedings{Coblenz2020:Can,
  title     = {Can Advanced Type Systems Be Usable? An Empirical Study of Ownership, Assets, and Typestate in Obsidian},
  author    = {Michael Coblenz and Jonathan Aldrich and Brad A. Myers and Joshua Sunshine},
  year      = {2020},
  booktitle = {PACMPL Issue OOPSLA},
  series    = {OOPSLA '20},
  abbr      = {OOPSLA},
  acm       = {https://dl.acm.org/doi/10.1145/3428200},
  note      = {<strong>(Distinguished Artifact Award)</strong>},
  demo      = {https://youtu.be/WOGupEHzef8},
  selected  = {true}
}

@phdthesis{Coblenz2020:Thesis,
  author = {Michael J. Coblenz},
  title  = {User-Centered Design of Principled Programming Languages},
  school = {Carnegie Mellon University},
  month  = {August},
  number = {CMU-CS-20-127},
  year   = {2020},
  pdf    = {Dissertation.pdf},
  abbr   = {Ph.D. Thesis},
  note   = {Ph.D. Thesis}
}

@article{Coblenz2020:Obsidian,
  title    = {Obsidian: Typestate and Assets for Safer Blockchain Programming},
  author   = {Michael Coblenz and Reed Oei and Tyler Etzel and Paulette Koronkevich and Miles Baker and Yannick Bloem and Brad A. Myers and Joshua Sunshine and Jonathan Aldrich},
  year     = {2020},
  journal  = {ACM Transactions on Programming Languages},
  volume   = {42},
  issue    = {3},
  acm      = {https://dl.acm.org/doi/10.1145/3417516},
  selected = {true},
  abbr     = {TOPLAS}
}

@article{Coblenz2020:Glacier,
  author  = {Michael Coblenz and Whitney Nelson and Jonathan Aldrich and Brad Myers and Joshua Sunshine},
  title   = {{Glacier software and user study replication package}},
  year    = {2020},
  month   = {7},
  url     = {https://kilthub.cmu.edu/articles/software/Glacier_software_and_user_study_replication_package/12108693},
  doi     = {10.1184/R1/12108693.v1},
  website = {https://kilthub.cmu.edu/articles/software/Glacier_software_and_user_study_replication_package/12108693}
}

@article{Coblenz2020:Obsidian-archive,
  author  = {Michael Coblenz and Jonathan Aldrich and Brad Myers and Joshua Sunshine},
  title   = {{Obsidian smart contract programming language}},
  year    = {2020},
  month   = {8},
  url     = {https://kilthub.cmu.edu/articles/software/Obsidian_smart_contract_programming_language/12814202},
  doi     = {10.1184/R1/12814202.v1},
  website = {https://kilthub.cmu.edu/articles/software/Obsidian_smart_contract_programming_language/12814202}
}

@article{Coblenz2020:ObsidianReplication,
  author  = {Michael Coblenz and Jonathan Aldrich and Brad Myers and Joshua Sunshine},
  title   = {{Obsidian vs. Solidity RCT Replication Package}},
  year    = {2020},
  month   = {8},
  url     = {https://kilthub.cmu.edu/articles/software/Obsidian_vs_Solidity_RCT_Replication_Package/12771074},
  doi     = {10.1184/R1/12771074.v1},
  website = {https://kilthub.cmu.edu/articles/software/Obsidian_vs_Solidity_RCT_Replication_Package/12771074}
}

@article{Coblenz2019:Smarter,
  title   = {Smarter Smart Contract Development Tools},
  author  = {Coblenz, Michael and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad A.},
  journal = {2nd International Workshop on Emerging Trends in Software Engineering for Blockchain},
  series  = {WETSEB},
  year    = {2019},
  doi     = {https://doi.org/10.1109/WETSEB.2019.00013},
  ieee    = {https://ieeexplore.ieee.org/document/8823902},
  abbr    = {WETSEB}
}

@article{Kambhatla2019:Pilot,
  author  = {Gauri Kambhatla and Michael Coblenz and Reed Oei and Joshua Sunshine and Brad Myers and Jonathan Aldrich},
  title   = {A Pilot Study of the Safety and Usability of the Obsidian Blockchain Programming Language},
  journal = {PLATEAU Workshop},
  year    = {2019},
  pdf     = {https://drops.dagstuhl.de/opus/volltexte/2020/11956/pdf/OASIcs-PLATEAU-2019-2.pdf},
  abbr    = {PLATEAU}
}

@inproceedings{Coblenz18:Interdisciplinary,
  title     = {Interdisciplinary Programming Language Design},
  author    = {Coblenz, Michael and Aldrich, Jonathan and Myers, Brad A. and Sunshine, Joshua},
  booktitle = {Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
  series    = {Onward! '18},
  year      = {2018},
  doi       = {https://doi.org/10.1145/3276954.3276965},
  pages     = {133‚Äì146},
  acm       = {https://dl.acm.org/doi/10.1145/3276954.3276965},
  abbr      = {Onward!}
}

@article{Coblenz18:Interdisciplinary-Programming,
  title     = {Interdisciplinary Programming Language Design},
  author    = {Coblenz, Michael and Aldrich, Jonathan and Myers, Brad A. and Sunshine, Joshua},
  booktitle = {The Art, Science, and Engineering of Programming},
  year      = {2019},
  volume    = {3},
  website   = {https://doi.org/10.22152/programming-journal.org/2019/3/16},
  abbr      = {&lt;Programming&gt;}
}

@inproceedings{Coblenz2017:Glacier,
  author    = {Michael Coblenz and Whitney Nelson and Jonathan Aldrich and Brad Myers and Joshua Sunshine},
  title     = {Glacier: Transitive Class Immutability for {Java}},
  booktitle = {International Conference on Software Engineering},
  series    = {ICSE '17},
  year      = {2017},
  publisher = {IEEE Press},
  pages     = {496‚Äì506},
  doi       = {10.1109/ICSE.2017.52},
  ieee      = {https://ieeexplore.ieee.org/document/7985688},
  abbr      = {ICSE},
  note      = {(16% acceptance rate)}
}

@inproceedings{Barnaby2017:User,
  title     = {A User Study to Inform the Design of the Obsidian Blockchain DSL},
  author    = {Barnaby, Celeste and Coblenz, Michael and Etzel, Tyler and Kanal, Eliezer and Sunshine, Joshua and Myers, Brad and Aldrich, Jonathan},
  booktitle = {Workshop on Evaluation and Usability of Programming Languages and Tools},
  series    = {PLATEAU '17},
  year      = {2017},
  abbr      = {PLATEAU},
  pdf       = {barnaby17plateau.pdf}
}

@inproceedings{Coblenz2017:Obsidian,
  title        = {Obsidian: a safer blockchain programming language},
  author       = {Coblenz, Michael},
  booktitle    = {International Conference on Software Engineering Companion},
  pages        = {97--99},
  year         = {2017},
  organization = {IEEE Press},
  abbr         = {ICSE SRC},
  ieee         = {https://doi.org/10.1109/ICSE-C.2017.150}
}

@inproceedings{Yost2016:Software,
  author    = {Beth Yost and Michael Coblenz and Brad Myers and Joshua Sunshine and Jonathan Aldrich and Sam Weber and Forrest Shull and Matthew Patron and Melissa Heeren, and Shelley Krueger and Mark Pfaff},
  title     = {Software Development Practices, Barriers in the Field and the Relationship to Software Quality},
  booktitle = {ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
  series    = {ESEM 2016},
  location  = {Ciudad Real, Spain},
  date      = {5-9 September, 2016},
  acm       = {https://dl.acm.org/doi/10.1145/2961111.2962614?cid=81100054399},
  note      = {(37% acceptance rate)},
  abbr      = {ESEM}
}

@techreport{Coblenz2016:Exploring-extended,
  author      = {Coblenz, Michael and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad and Weber, Sam and Shull, Forrest},
  title       = {Exploring Language Support for Immutability (extended version)},
  year        = {2016},
  location    = {Pittsburgh, Pennsylvania, USA},
  number      = {CMU-ISR-16-106},
  institution = {Carnegie Mellon University},
  abbr        = {TR},
  pdf         = {http://reports-archive.adm.cs.cmu.edu/anon/isr2016/CMU-ISR-16-106.pdf}
}

@inproceedings{Coblenz2016:Exploring,
  author    = {Coblenz, Michael and Sunshine, Joshua and Aldrich, Jonathan and Myers, Brad and Weber, Sam and Shull, Forrest},
  title     = {Exploring Language Support for Immutability},
  booktitle = {International Conference on Software Engineering},
  series    = {ICSE '16},
  year      = {2016},
  isbn      = {978-1-4503-3900-1},
  location  = {Austin, Texas},
  keywords  = {empirical studies of programmers, immutability, mutability, programmer productivity, programming language design, programming language usability},
  publisher = {ACM},
  doi       = {10.1145/2884781.2884798},
  pages     = {736‚Äì747},
  abbr      = {ICSE},
  acm       = {https://dl.acm.org/doi/10.1145/2884781.2884798?cid=81100054399},
  note      = {(19% acceptance rate)}
} 

@inproceedings{Coblenz2015:Course,
  author    = {Michael Coblenz and Robert Seacord and Brad Myers and Joshua Sunshine and Jonathan Aldrich},
  title     = {A Course-Based Usability Analysis of Cilk Plus and OpenMP},
  booktitle = {Visual Languages and Human-Centric Computing},
  series    = {VL/HCC 2015},
  date      = {October 18‚Äì22, 2015},
  year      = {2015},
  location  = {Atlanta, Georgia},
  pdf       = {vlhcc2015.pdf}
}

@inproceedings{Weber2014:Empirical,
  author    = {Sam Weber and Robert Seacord and Forrest Shull and David Keaton and Brad Myers and Michael Coblenz},
  title     = {Empirical Evaluation of API Usability and Security},
  booktitle = {Layered Assurance Workshop},
  date      = {December 8, 2014},
  location  = {New Orleans, LA},
  pages     = {35},
  pdf       = {http://www.acsac.org/2014/workshops/law/2014-law-proceedings.pdf}
}

@inproceedings{Coblenz2014:Considering,
  author    = {Coblenz, Michael and Aldrich, Jonathan and Myers, Brad and Sunshine, Joshua},
  title     = {Considering Productivity Effects of Explicit Type Declarations},
  booktitle = {Workshop on Evaluation and Usability of Programming Languages and Tools},
  series    = {PLATEAU '14},
  year      = {2014},
  isbn      = {978-1-4503-2277-5},
  location  = {Portland, Oregon, USA},
  numpages  = {3},
  url       = {http://doi.acm.org/10.1145/2688204.2688218},
  doi       = {10.1145/2688204.2688218},
  acmid     = {2688218},
  keywords  = {programmer productivity, type declarations, type inference},
  abbr      = {PLATEAU},
  acm       = {https://dl.acm.org/doi/10.1145/2688204.2688218?cid=81100054399}
} 

@mastersthesis{Coblenz2006:JASPERa,
  author      = {Michael J. Coblenz},
  title       = {JASPER: Facilitating Software Maintenance Activities With Explicit Task Representations},
  number      = {Technical Report CMU-CS-06-150 and CMU-HCII-06-107},
  institution = {School of Computer Science, Carnegie Mellon University, Pittsburgh, PA},
  month       = {August},
  year        = {2006},
  pdf         = {http://reports-archive.adm.cs.cmu.edu/anon/2006/CMU-CS-06-150.pdf},
  abbr        = {Master's Thesis}
}

@inproceedings{Coblenz2006:JASPERb,
  author    = {Michael Coblenz and Amy J. Ko and Brad A. Myers},
  acm       = {https://dl.acm.org/doi/10.1145/1188835.1188849?cid=81100054399},
  title     = {JASPER: an Eclipse plug-in to facilitate software maintenance tasks},
  booktitle = {Eclipse Technology eXchange Workshop at OOPSLA 2006},
  date      = {October 22-23},
  location  = {Portland, OR},
  pages     = {65-69}
}

@article{Ko2006:Exploratory,
  title     = {An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks},
  author    = {Ko, Amy J and Myers, Brad A and Coblenz, Michael J and Aung, Htet Htet},
  journal   = {IEEE Transactions on software engineering},
  volume    = {32},
  number    = {12},
  year      = {2006},
  publisher = {IEEE},
  doi       = {https://doi.org/10.1109/TSE.2006.116},
  abbr      = {TSE},
  ieee      = {https://www.computer.org/csdl/journal/ts/2006/12/04016573/13rRUwInuXZ}
}

@techreport{Coblenz2005:Using,
  author      = {Michael J. Coblenz},
  title       = {Using Objects of Measurement to Detect Spreadsheet Errors},
  number      = {Technical Report CMU-CS-05-150},
  institution = {School of Computer Science, Carnegie Mellon University, Pittsburgh, PA},
  month       = {July},
  year        = {2005},
  note        = {Bachelor‚Äôs honors thesis},
  pdf         = {http://reports-archive.adm.cs.cmu.edu/anon/2005/CMU-CS-05-150.pdf},
  abbr        = {Bachelor's Thesis}
}
